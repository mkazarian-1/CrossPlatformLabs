// <auto-generated />
using System;
using Lab6.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lab6.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241121210604_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lab6.Models.ActualOrder", b =>
                {
                    b.Property<int>("ActualOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActualOrderId"));

                    b.Property<DateTime>("ActualOrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RefOrderStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("RefOrderStatusId1")
                        .HasColumnType("int");

                    b.HasKey("ActualOrderId");

                    b.HasIndex("RefOrderStatusId");

                    b.HasIndex("RefOrderStatusId1");

                    b.ToTable("ActualOrders");
                });

            modelBuilder.Entity("Lab6.Models.ActualOrderProduct", b =>
                {
                    b.Property<int>("ActualOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ActualOrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ActualOrderProducts");
                });

            modelBuilder.Entity("Lab6.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherAddressDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateProvinceCounty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipPostcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Lab6.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateBecameCustomer")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtherCustomerDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RefPaymentMethodId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("RefPaymentMethodId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Lab6.Models.CustomerAddress", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("RefAddressTypeId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "AddressId");

                    b.HasIndex("AddressId");

                    b.HasIndex("RefAddressTypeId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("Lab6.Models.Delivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryId"));

                    b.Property<int>("ActualOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryRouteLocationDeliveryRouteId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryRouteLocationId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryRouteLocationId1")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryStatusId")
                        .HasColumnType("int");

                    b.Property<int>("DriverEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("OtherDeliveryDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RefDeliveryStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TruckId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryId");

                    b.HasIndex("ActualOrderId");

                    b.HasIndex("DeliveryStatusId");

                    b.HasIndex("DriverEmployeeId");

                    b.HasIndex("RefDeliveryStatusId");

                    b.HasIndex("TruckId");

                    b.HasIndex("DeliveryRouteLocationDeliveryRouteId", "DeliveryRouteLocationId1");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("Lab6.Models.DeliveryRoute", b =>
                {
                    b.Property<int>("DeliveryRouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryRouteId"));

                    b.Property<string>("DeliveryRouteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherDeliveryRouteDetails")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryRouteId");

                    b.ToTable("DeliveryRoutes");
                });

            modelBuilder.Entity("Lab6.Models.DeliveryRouteLocation", b =>
                {
                    b.Property<int>("DeliveryRouteId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryRouteLocationId")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherLocationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryRouteId", "DeliveryRouteLocationId");

                    b.HasIndex("AddressId");

                    b.ToTable("DeliveryRouteLocations");
                });

            modelBuilder.Entity("Lab6.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int>("EmployeeAddressId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherEmployeeDetails")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("EmployeeAddressId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Lab6.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Lab6.Models.RefAddressType", b =>
                {
                    b.Property<int>("RefAddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefAddressTypeId"));

                    b.Property<string>("RefAddressTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefAddressTypeId");

                    b.ToTable("RefAddressTypes");
                });

            modelBuilder.Entity("Lab6.Models.RefDeliveryStatus", b =>
                {
                    b.Property<int>("RefDeliveryStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefDeliveryStatusId"));

                    b.Property<string>("RefDeliveryStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefDeliveryStatusId");

                    b.ToTable("RefDeliveryStatuses");
                });

            modelBuilder.Entity("Lab6.Models.RefOrderStatus", b =>
                {
                    b.Property<int>("RefOrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefOrderStatusId"));

                    b.Property<string>("RefOrderStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefOrderStatusId");

                    b.ToTable("RefOrderStatuses");
                });

            modelBuilder.Entity("Lab6.Models.RefPaymentMethod", b =>
                {
                    b.Property<int>("RefPaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefPaymentMethodId"));

                    b.Property<string>("RefPaymentMethodDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefPaymentMethodId");

                    b.ToTable("RefPaymentMethods");
                });

            modelBuilder.Entity("Lab6.Models.RegularOrder", b =>
                {
                    b.Property<int>("RegularOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegularOrderId"));

                    b.Property<int>("DistributorId")
                        .HasColumnType("int");

                    b.Property<string>("OrderDetails")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegularOrderId");

                    b.HasIndex("DistributorId");

                    b.ToTable("RegularOrders");
                });

            modelBuilder.Entity("Lab6.Models.RegularOrderProduct", b =>
                {
                    b.Property<int>("RegularOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("RegularOrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("RegularOrderProducts");
                });

            modelBuilder.Entity("Lab6.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("SupplierDetails")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Lab6.Models.Truck", b =>
                {
                    b.Property<int>("TruckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TruckId"));

                    b.Property<string>("TruckDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TruckLicenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TruckId");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("Lab6.Models.ActualOrder", b =>
                {
                    b.HasOne("Lab6.Models.RefOrderStatus", "RefOrderStatus")
                        .WithMany()
                        .HasForeignKey("RefOrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.RefOrderStatus", null)
                        .WithMany("ActualOrders")
                        .HasForeignKey("RefOrderStatusId1");

                    b.Navigation("RefOrderStatus");
                });

            modelBuilder.Entity("Lab6.Models.ActualOrderProduct", b =>
                {
                    b.HasOne("Lab6.Models.ActualOrder", "ActualOrder")
                        .WithMany("ActualOrderProducts")
                        .HasForeignKey("ActualOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.Product", "Product")
                        .WithMany("ActualOrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActualOrder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Lab6.Models.Customer", b =>
                {
                    b.HasOne("Lab6.Models.RefPaymentMethod", "RefPaymentMethod")
                        .WithMany("Customers")
                        .HasForeignKey("RefPaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefPaymentMethod");
                });

            modelBuilder.Entity("Lab6.Models.CustomerAddress", b =>
                {
                    b.HasOne("Lab6.Models.Address", "Address")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.RefAddressType", "RefAddressType")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("RefAddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");

                    b.Navigation("RefAddressType");
                });

            modelBuilder.Entity("Lab6.Models.Delivery", b =>
                {
                    b.HasOne("Lab6.Models.ActualOrder", "ActualOrder")
                        .WithMany("Deliveries")
                        .HasForeignKey("ActualOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.RefDeliveryStatus", "DeliveryStatus")
                        .WithMany()
                        .HasForeignKey("DeliveryStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.Employee", "DriverEmployee")
                        .WithMany("Deliveries")
                        .HasForeignKey("DriverEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lab6.Models.RefDeliveryStatus", null)
                        .WithMany("Deliveries")
                        .HasForeignKey("RefDeliveryStatusId");

                    b.HasOne("Lab6.Models.Truck", "Truck")
                        .WithMany("Deliveries")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.DeliveryRouteLocation", "DeliveryRouteLocation")
                        .WithMany()
                        .HasForeignKey("DeliveryRouteLocationDeliveryRouteId", "DeliveryRouteLocationId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActualOrder");

                    b.Navigation("DeliveryRouteLocation");

                    b.Navigation("DeliveryStatus");

                    b.Navigation("DriverEmployee");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("Lab6.Models.DeliveryRouteLocation", b =>
                {
                    b.HasOne("Lab6.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.DeliveryRoute", "DeliveryRoute")
                        .WithMany("DeliveryRouteLocations")
                        .HasForeignKey("DeliveryRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("DeliveryRoute");
                });

            modelBuilder.Entity("Lab6.Models.Employee", b =>
                {
                    b.HasOne("Lab6.Models.Address", "EmployeeAddress")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeAddress");
                });

            modelBuilder.Entity("Lab6.Models.Product", b =>
                {
                    b.HasOne("Lab6.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Lab6.Models.RegularOrder", b =>
                {
                    b.HasOne("Lab6.Models.Customer", "Distributor")
                        .WithMany("RegularOrders")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Distributor");
                });

            modelBuilder.Entity("Lab6.Models.RegularOrderProduct", b =>
                {
                    b.HasOne("Lab6.Models.Product", "Product")
                        .WithMany("RegularOrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.RegularOrder", "RegularOrder")
                        .WithMany("RegularOrderProducts")
                        .HasForeignKey("RegularOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("RegularOrder");
                });

            modelBuilder.Entity("Lab6.Models.ActualOrder", b =>
                {
                    b.Navigation("ActualOrderProducts");

                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("Lab6.Models.Address", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Lab6.Models.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("RegularOrders");
                });

            modelBuilder.Entity("Lab6.Models.DeliveryRoute", b =>
                {
                    b.Navigation("DeliveryRouteLocations");
                });

            modelBuilder.Entity("Lab6.Models.Employee", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("Lab6.Models.Product", b =>
                {
                    b.Navigation("ActualOrderProducts");

                    b.Navigation("RegularOrderProducts");
                });

            modelBuilder.Entity("Lab6.Models.RefAddressType", b =>
                {
                    b.Navigation("CustomerAddresses");
                });

            modelBuilder.Entity("Lab6.Models.RefDeliveryStatus", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("Lab6.Models.RefOrderStatus", b =>
                {
                    b.Navigation("ActualOrders");
                });

            modelBuilder.Entity("Lab6.Models.RefPaymentMethod", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Lab6.Models.RegularOrder", b =>
                {
                    b.Navigation("RegularOrderProducts");
                });

            modelBuilder.Entity("Lab6.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Lab6.Models.Truck", b =>
                {
                    b.Navigation("Deliveries");
                });
#pragma warning restore 612, 618
        }
    }
}
